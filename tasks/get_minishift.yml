- name: install | get_minishift | Set the 'latest' release URL
  set_fact:
    minishift_release_url: "{{ __ms.repo.github_url }}/{{ __ms.repo.name }}/releases/latest"

- name: install | get_minishift | Set the 'tagget' release URL
  set_fact:
    minishift_release_url: "{{ __ms.repo.github_url }}/{{ __ms.repo.name }}/releases/tags/{{ __ms.repo.release_tag_name }}"
  when: __ms.repo.release_tag_name != ''

- name: install | get_minishift | Query the URL
  uri:
    url: "{{ minishift_release_url }}"
  register: release

## required 'jmespath': $ pip install jmespath
- name: install | get_minishift | Get asset details
  set_fact:
    asset_url: "{{ item.browser_download_url }}"
    asset_name: "{{ item.name }}"
    asset_name_without_ext: "{{ item.name | regex_replace('^(.+).tgz$', '\\1') }}"
  with_items: "{{ release.json | json_query(my_query) }}"
  vars:
    my_query: "assets[?name=='minishift-{{ release.json.tag_name | regex_replace('^v(.+)$', '\\1') }}-{{ ansible_system | lower }}-amd64.tgz']"

- name: install | get_minishift | Create a dir to unarchive
  file:
    path: "{{ __ms.dir.local_repo }}/{{ asset_name_without_ext }}"
    state: directory
    recurse: yes

- name: install | get_minishift | Download the asset
  get_url:
    url: "{{ asset_url }}"
    dest: "{{ __ms.dir.local_repo }}/{{ asset_name }}"

- name: install | get_minishift | Unzip the archive
  command: "unzip {{ __ms.dir.local_repo }}/{{ asset_name }} -d {{ __ms.dir.local_repo }}/{{ asset_name_without_ext }}"
  args:
    creates: "{{ __ms.dir.local_repo }}/{{ asset_name_without_ext }}/minishift"
  when: asset_name | search('zip$')

- name: install | get_minishift | Untar the archive
  command: "tar -xvzf {{ __ms.dir.local_repo }}/{{ asset_name }} -C {{ __ms.dir.local_repo }}/{{ asset_name_without_ext }}"
  args:
    creates: "{{ __ms.dir.local_repo }}/{{ asset_name_without_ext }}/minishift"
  when: asset_name | search('tgz$')

- name: install | get_minishift | Search 'minishift' binary in unzipped dir '{{ __ms.dir.local_repo }}/{{ asset_name_without_ext }}'
  find:
    paths:
      - "{{ __ms.dir.local_repo }}/{{ asset_name_without_ext }}/"
    file_type: file
    patterns: "^(minishift)$"
    use_regex: true
    recurse: yes
  register: my_minishift_file_to_copy

- name: install | get_minishift | Copy 'minishift' to the 'bin' directory
  copy:
    src: "{{ my_minishift_file_to_copy.files[0].path }}"
    dest: "{{ __ms.dir.local_bin }}/minishift"
    remote_src: yes
    mode: 0775
    force: yes
  become: yes
